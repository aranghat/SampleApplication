@model SampleApplication.Models.QuestionPaper
<!DOC />
<html>
    <head>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-aFq/bzH65dt+w6FI2ooMVUpc+21e0SRygnTpmBvdBgSdnuTN7QbdgL+OapgHtvPp" crossorigin="anonymous">
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/js/bootstrap.bundle.min.js" integrity="sha384-qKXV1j0HvMUeCBQ+QVp7JcfGl760yU08IQ+GpUo5hlbpg51QRiuqHAJz8+BrxE/N" crossorigin="anonymous"></script>

        <!-- PDF Js Library-->
    
    <script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" />

    </head>
<body class="bg-light  vh-100">
    <div class="container-fluid  vh-100">
            <div class="row">
            <div class="col-2 bg-dark  vh-100">
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks=".25">1/4</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks=".50">1/2</button>
                        </div>
                    </div>
                    <div class="row my-4">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="1">1</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="2">2</button>
                        </div>
                    </div>
                    <div class="row my-4">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="3">3</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="4">4</button>
                        </div>
                    </div>
                    <div class="row my-4">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="5">5</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="6">6</button>
                        </div>
                    </div>
                    <div class="row my-4">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="7">7</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="8">8</button>
                        </div>
                    </div>
                    <div class="row my-4">
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="9">9</button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100" data-marks="10">0</button>
                        </div>
                    </div>
                    <hr  />
                    <div class="row my-4">
                        <div class="col-6">
                            <button type="button" class="btn btn-success w-100" data-answer-type="right"><i class="bi bi-check-circle-fill"></i></button>
                        </div>
                        <div class="col-6">
                            <button type="button" class="btn btn-danger w-100" data-answer-type="wrong"><i class="bi bi-slash-circle"></i></button>
                        </div>
                    </div>
                </div>
            </div>
                 <div class="col-7 vh-100">
                    <canvas id="pdf-canvas"></canvas>
                 </div>
                 <div class="col-3">
                    <div class="container mt-4">
                    <div class="row mt-4">
                        <div class="col-2"><strong>Q.NO</strong></div>
                        <div class="col-4"><strong>Marks</strong></div>
                        <div class="col-6 text-center"><strong>Max. Marks</strong></div>
                    </div>
                    @foreach (var q in Model.Questions)
                    {      
                        <div class="row mt-4">
                            <div class="col-2"><button type="button" class="btn btn-warning btn-sm w-100 btn-question" data-max-marks="@q.MaxMarks" data-question-id="@q.QuestionNumber">@q.QuestionNumber</button></div>
                            <div class="col-4"><strong><input type="text" class="form-control form-control-sm form-marks text-center" data-question-id="@q.QuestionNumber" /></strong></div>
                            <div class="col-6 text-center"><strong>@q.MaxMarks</strong></div>
                        </div>
                    }
                    </div>
                <div class="row mt-4">
                    <div class="col-6"><strong>TOTAL Marks</strong></div>
                    <div class="col-6 text-center"><strong> <span id="spanTotalMarks">0</span> / @Model.MaxMarks</strong></div>
                </div>
            </div>
            </div>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
        <script>
            let selectedQuestionNumber = 0;
            let currentMarksSelected   = 0;
            let maxMarks = 0;
            let totalMarks = 0;

            let marks =  [];
            let marksCordinated = [];
            let drawCordinated = [];


            /*

                1. Draw Marks
                2. Draw Tick
                3. Draw Wrong

            */
            let drawType = 0 ;
            let currentPageNumber = 1;
            //Set up PDF
            const url = '@Model.FilePath';
            const canvas = document.getElementById('pdf-canvas');
            const ctx = canvas.getContext('2d');



            pdfjsLib.getDocument(url).promise.then((pdf) => {
     
            pdf.getPage(1).then((page) => {
                const viewport = page.getViewport({ scale: 1 });
                canvas.width = viewport.width;
                canvas.height = viewport.height;

                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport,
                };

                page.render(renderContext).then(() => {
                    // PDF is now rendered on the canvas
                });
            });
        });

        $(document).ready(() => {

                 //Set the current question Number

                 $(".btn-question").click(function(){

                      currentMarksSelected = 0;
                      $(".btn-question").removeClass("btn-success");
                      $(".btn-question").addClass("btn-warning");

                      selectedQuestionNumber = Number($(this).attr("data-question-id"));
                      maxMarks = Number($(this).attr("data-max-marks"));

                      $(this).removeClass("btn-warning");
                      $(this).addClass("btn-success");
                 });

                 $("[data-marks]").click(function(){
                    if(selectedQuestionNumber > 0)
                    {
                        currentMarksSelected += Number($(this).attr("data-marks"));
                        if(currentMarksSelected > maxMarks)
                        {
                            alert(`Max marks for this question is ${maxMarks}`);
                            currentMarksSelected = 0;
                        }
                        else
                        {
                             $(`input[data-question-id=${selectedQuestionNumber}]`).val(currentMarksSelected);
                             updateMarks(selectedQuestionNumber,currentPageNumber,currentMarksSelected);
                             drawType = 1;
                        }
                    }
                    else {
                        alert("Please select a question first");
                    }
                 });

                $("[data-answer-type]").click(function () {
                    drawType = $(this).attr("data-answer-type") == "right" ? 2 : 3;
                });


            });


        
        canvas.addEventListener('mouseup', (e) => {
           const rect = canvas.getBoundingClientRect();
            let x = e.clientX - rect.left;
            let y = e.clientY - rect.top;

            if(selectedQuestionNumber > 0)
            {
                if(drawType == 1)
                {
                    if(currentMarksSelected > 0)
                    {
                        drawNumberInCircle(50,y,20,currentMarksSelected);
                    }
                    else
                    {
                        alert("Please select a valid marks");
                    }
                }

                if (drawType == 2)
                {
                    console.debug("Correct Answer");
                    drawTickMark(x,y,20);
                }

                if(drawType == 3)
                {
                    console.debug("Wrong Answer");
                    drawXMark(x,y,20);
                }
            }
            else
            {
                alert("Please select a question");
            }

        });


        /*------------------------    Canvas Draw Mark ------------------------------*/

        function drawNumberInCircle(x, y, radius, number) {
            // Draw the circle
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, 2 * Math.PI);
            ctx.fillStyle = 'blue';
            ctx.fill();
            ctx.closePath();

            // Draw the number
            ctx.font = `${radius}px Arial`;
            ctx.fillStyle = 'white';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(number, x, y);
        }

        /*------------------------    Canvas Draw Correct Answer ------------------------------*/

        function drawTickMark(x, y, size) {
            ctx.strokeStyle = 'green';
            ctx.lineWidth = size / 5;

            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + size / 3, y + size / 2);
            ctx.lineTo(x + size, y - size / 2);
            ctx.stroke();
        }

        /*------------------------    Canvas Draw Wrong Answer ------------------------------*/

        function drawXMark(x, y, size) {
            ctx.strokeStyle = 'red';
            ctx.lineWidth = size / 5;

            ctx.beginPath();
            ctx.moveTo(x, y - size / 2);
            ctx.lineTo(x + size, y + size / 2);
            ctx.moveTo(x, y + size / 2);
            ctx.lineTo(x + size, y - size / 2);
            ctx.stroke();
        }

        function updateMarks(){
            
            marks = [];
            $(".form-marks").each((index,element) => {
                let questionNumber = $(element).attr("data-question-id");
                let m = $(element).val();
                if (m.length > 0) {
                    marks.push({questionNumber,currentMarks:m,pagenumber : currentPageNumber });
                }
            });


            console.debug(marks);
            calculateTotal();
        }

        function calculateTotal(){
            totalMarks = 0;
            totalMarks = marks.reduce((total,m) => total+= Number(m.currentMarks),0);
            console.debug(totalMarks);
            $("#spanTotalMarks").html(totalMarks);
        }

        </script>
    </body>
</html>
